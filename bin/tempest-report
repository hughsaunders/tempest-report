#!/usr/bin/python -u
# Copyright (C) 2013 eNovance SAS <licensing@enovance.com>

import datetime
import logging
import optparse
import os
import pkgutil
import Queue
import sys
import tempest
import tempfile
import threading
import time

from tempest_report.utils import service_summary, executer, customized_tempest_conf
from tempest_report import settings


def worker(queue, successful_tests, verbose=False):
    logger = logging.getLogger('tempest_report')
    while True:
        try:
            testname, configfile_name = queue.get_nowait()
        except Queue.Empty:
            break
        
        success, output = executer(testname, configfile_name)
        
        logger.debug(output)
        
        if success:
            successful_tests.append(testname)
            msg = "OK:  %s" % testname
        else:
            msg = "ERR: %s" % testname
        
        if verbose:
            logger.info(msg)
        
        queue.task_done()


def main(user, password, keystone_url, max_test_level=1, verbose=False,
         tenant_name=None, max_release_level=sys.maxint, full_run=False):
    now = datetime.datetime.now()
    logfile = "tempest_report-%s.log" % now.strftime("%Y%m%d-%H%M%S")
    print "Full test output logged to %s" % logfile

    logger = logging.getLogger('tempest_report')
    logger.setLevel(logging.DEBUG)
    loghandle = logging.FileHandler(logfile)
    loghandle.setLevel(logging.DEBUG)
    logger.addHandler(loghandle)
    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    logger.addHandler(console)

    configfile = tempfile.NamedTemporaryFile(delete=False)
    customized_tempest_conf(user, password, keystone_url, configfile, tenant_name)

    queue = Queue.Queue()
    successful_tests = [] 
    all_tests = []
  
    if not full_run: 
        for test, values in settings.description_list.items():
            test_level = values.get('level', 1)
            release_level = values.get('release', 0)
            if (int(test_level) <= int(max_test_level)
                and int(release_level) <= int(max_release_level)):
                queue.put((test, configfile.name))
                all_tests.append(test)
    else:
        packages = pkgutil.walk_packages(tempest.__path__, prefix="tempest.")
        for _importer, testname, _ispkg in packages:
            if "test_" in testname:
                queue.put((testname, configfile.name))
                all_tests.append(testname)

    threads = []
    for _nr in range(4):
        thread = threading.Thread(target=worker,
            args=(queue, successful_tests, verbose))
        thread.daemon = True
        thread.start()
        threads.append(thread)

    while True:
        try:
            if len([t for t in threads if t.isAlive()]) == 0:
                break
            time.sleep(1)
        except KeyboardInterrupt:
            break
    
    failed_tests = '\n'.join([t for t in all_tests if t not in successful_tests])
    if failed_tests:
        logger.info("\nFailed tests:\n%s" % failed_tests)

    if successful_tests:
        logger.info("\nSuccessful tests:\n%s" % ('\n'.join(successful_tests)))

    summary = "\n"
    for _, service in service_summary(successful_tests).items():
        summary += "%s: %s\n" % (service.name, service.release_name)
        for feature in service.features:
            summary += "\t\t\t\t%s\n" % (feature,)
    logger.info(summary)

    os.remove(configfile.name)


if __name__ == '__main__':
    parser = optparse.OptionParser(usage='''
usage: %%prog [--level <detail level>]
             [--verbose]
             [--os-username <auth-user-name>]
             [--os-password <auth-password>]
             [--os-auth-url <auth-url>]
             [--os-tenant-name <auth-tenant-name>]
             [--release <release level>]
             [--full-run]

Command-line interface for OpenStack Tempest.

Examples:
  %%prog --os-auth-url http://127.0.0.1:5000 \\
      --os-username user --os-password password --level 2
'''.strip('\n') % globals())
    parser.add_option('-l', '--level', dest='level',
                      default=1, help='Increase test level')
    parser.add_option("-v", '--verbose', action="store_true", dest="verbose",
                      help='Increase verbosity')
    parser.add_option('--os-username',
                      default=os.environ.get('OS_USERNAME'),
                      metavar='<auth-user-name>',
                      help='Openstack username. Defaults to env[OS_USERNAME].')
    parser.add_option('--os-password',
                      default=os.environ.get('OS_PASSWORD'),
                      metavar='<auth-password>',
                      help='Openstack password. Defaults to env[OS_PASSWORD].')
    parser.add_option('--os-auth-url',
                      default=os.environ.get('OS_AUTH_URL'),
                      metavar='<auth-url>',
                      help='Openstack auth URL. Defaults to env[OS_AUTH_URL].')
    parser.add_option('--os-tenant-name',
                      metavar='<auth-tenant-name>',
                      default=os.environ.get('OS_TENANT_NAME'),
                      help='Openstack tenant name. '
                           'Defaults to env[OS_TENANT_NAME].')
    parser.add_option('-r', '--release', default=sys.maxint,
                      help='Only run tests with a release lower or equal.'
                           '(Folsom: 6, Grizzly: 7, Havana: 8 and so on)')
    parser.add_option("-f", '--full-run', action="store_true", dest="fullrun",
                      default=False, help='Run all tempest tests')
 
    (options, args) = parser.parse_args()
    
    if not (options.os_username and options.os_password and options.os_auth_url):
        parser.print_usage()
        sys.exit(1)
      
    if not options.verbose:
        print "Executing tests in background, this might take a while."

    main(options.os_username, options.os_password, options.os_auth_url,
         options.level, options.verbose, options.os_tenant_name,
         options.release, options.fullrun)
